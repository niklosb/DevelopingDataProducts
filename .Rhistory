runApp()
setwd("C:/Users/bosnynv/Desktop/GitHub/DevelopingDataProducts")
runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("./transactions.csv")
View(data)
shiny::runApp()
str(transactions)
str(data)
data[,1] <- as.Date(data[,1] , format="%m/%d/%Y")
str(data)
shiny::runApp()
str(x)
library(shiny)
data <- read.csv("./transactions.csv")
data[,1] <- as.Date(data[,1] , format="%m/%d/%Y")
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- data[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(data, breaks = bins, col = 'darkgray', border = 'white')
})
})
str(x)
x    <- data[, 2]
str(x)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
# Copy the line below to make a date range selector
dateRangeInput("dates", label = h3("Date range"), start="2014-01-01"),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
library(shiny)
data <- read.csv("transactions.csv")
data[,1] <- as.Date(data[,1] , format="%m/%d/%Y")
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
activeSubsetByDate <- subset(data, data$Date < input$dates[1,1])
# generate bins based on input$bins from ui.R
x    <- activeSubsetByDate[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ggplot(data=x, aes(x=Date, y=Amount, color=Transaction.Type)) + geom_bar(stat="identity", position=position_dodge())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/GitHub/DevelopingDataProducts/ui.R', echo=TRUE)
source('~/GitHub/DevelopingDataProducts/ui.R', echo=TRUE)
runApp()
library(shiny)
install.packages("shiny")
library(shiny)
library(lubridate)
require(TTR)
install.packages("lubridate")
library(shiny)
library(lubridate)
require(TTR)
runAPP()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyapps")
shinyapps::setAccountInfo(name='niklosb', token='22D3AF8C2BED780E93CD7351F40B1D14', secret='sOfIxi6TJA5YbJl3PFO3qDVowFaOWCteI0t6JVZ3')
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library("shinyapps", lib.loc="~/R/win-library/3.0")
shinyapps::setAccountInfo(name='niklosb', token='22D3AF8C2BED780E93CD7351F40B1D14', secret='sOfIxi6TJA5YbJl3PFO3qDVowFaOWCteI0t6JVZ3')
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
deployApp()
setwd("~/GitHub/DevelopingDataProducts")
SYMs<-read.csv("/data/NYSE.csv", skip=3)
SYMs<-read.csv("~/data/NYSE.csv", skip=3)
SYMs<-read.csv("data/NYSE.csv", skip=3)
deployApp()
View(SYMs)
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd
getwd()
paste(getwd(), "/data/NYSE.csv")
paste(getwd(), "/data/NYSE.csv", sep"")
paste(getwd(), "/data/NYSE.csv", sep="")
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
deployApp()
###Coursera's Developing Data Products Class
devtools:install_github("rmarkdown", "rstudio")
